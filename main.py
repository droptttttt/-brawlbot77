import telebot
from telebot import types
import time
import sqlite3

TOKEN = "8013845194:AAHOo7ZxpUNRyMhKiHB_FAV6nGBl3YtO1SA"
CHANNEL_USERNAME = "@housebrawlnews"
ADMIN_ID = 7803143441

bot = telebot.TeleBot(TOKEN)
conn = sqlite3.connect('brawlbot.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    gems REAL DEFAULT 0,
    last_box INTEGER DEFAULT 0,
    ref_id INTEGER,
    referrals INTEGER DEFAULT 0,
    box_count INTEGER DEFAULT 0,
    bonus_boxes INTEGER DEFAULT 0
)
''')
conn.commit()

def check_subscription(user_id):
    try:
        status = bot.get_chat_member(CHANNEL_USERNAME, user_id).status
        return status in ['member', 'administrator', 'creator']
    except:
        return False

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, ref_id) VALUES (?, ?)", (user_id, ref_id))
        if ref_id and ref_id != user_id:
            cursor.execute("UPDATE users SET referrals = referrals + 1, bonus_boxes = bonus_boxes + 1 WHERE user_id=?", (ref_id,))
        conn.commit()

    if not check_subscription(user_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"))
        markup.add(types.InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
        bot.send_message(user_id, "üîí –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:", reply_markup=markup)
    else:
        show_main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def callback_check(call):
    if check_subscription(call.from_user.id):
        show_main_menu(call.from_user.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")

def show_main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì§ –í—ã–≤–µ—Å—Ç–∏ –≥–µ–º—ã")
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
def open_gift(message):
    user_id = message.from_user.id
    now = int(time.time())

    cursor.execute("SELECT last_box, bonus_boxes FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    last_box, bonus_boxes = row

    if bonus_boxes > 0:
        reward = 0.01 if random.random() < 0.99 else 10
        cursor.execute("UPDATE users SET gems = gems + ?, bonus_boxes = bonus_boxes - 1, box_count = box_count + 1 WHERE user_id=?", (reward, user_id))
        conn.commit()
        bot.send_message(user_id, f"üéâ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward} –≥–µ–º–æ–≤!")
        return

    if now - last_box < 3 * 60 * 60:
        remaining = 3 * 60 * 60 - (now - last_box)
        minutes = remaining // 60
        bot.send_message(user_id, f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω.")
        return

    reward = 0.01 if random.random() < 0.99 else 10
    cursor.execute("UPDATE users SET gems = gems + ?, last_box = ?, box_count = box_count + 1 WHERE user_id=?", (reward, now, user_id))
    conn.commit()
    bot.send_message(user_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –≥–µ–º–æ–≤!")

@bot.message_handler(func=lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.from_user.id
    cursor.execute("SELECT gems, referrals, box_count FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        gems, referrals, box_count = result
        ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        bot.send_message(user_id, f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üíé –ì–µ–º—ã: {gems:.2f}
üì¶ –û—Ç–∫—Ä—ã—Ç–∏–π: {box_count}
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {referrals}
üîó –°—Å—ã–ª–∫–∞: {ref_link}")
    else:
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

@bot.message_handler(func=lambda msg: msg.text == "üì§ –í—ã–≤–µ—Å—Ç–∏ –≥–µ–º—ã")
def withdraw(message):
    user_id = message.from_user.id
    cursor.execute("SELECT gems FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result and result[0] >= 30:
        bot.send_message(user_id, "üì§ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        bot.send_message(ADMIN_ID, f"üö® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
üíé –ì–µ–º—ã: {result[0]:.2f}")
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30).")

import random
bot.infinity_polling()
